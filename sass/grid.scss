// GRID


.container {
	margin-right: auto;
	margin-left: auto;
	@include clearfix;
	padding-left:  $gridPaddingWidth;
	padding-right: $gridPaddingWidth;
}

.row {
	@include box-sizing(border-box);
	@include clearfix;

	// Mobile columns
	#{$gridSpanMobileClasses} {
		padding-left:  $gridPaddingWidth / 2;
		padding-right: $gridPaddingWidth / 2;
	}

	// Grid nesting fix
	.row{
		margin-left:  $gridPaddingWidth / -2;
		margin-right: $gridPaddingWidth / -2;

		#{$gridSpanClasses} {
			padding-left:  $gridPaddingWidth / 2;
			padding-right: $gridPaddingWidth / 2;
		}
	}


	&.rowMobile{
		margin-left:  $gridPaddingWidth / -2;
		margin-right: $gridPaddingWidth / -2;
		.row{
			margin-left: 0;
			margin-right: 0;
		}
	}

}


@mixin span-stuff(){
	padding-left:  $gridPaddingWidth / 2;
	padding-right: $gridPaddingWidth / 2;
	float: left; 
}

// ^= selectors are slow
#{$gridSpanClasses}, #{$gridSpanMobileClasses} {
	position: relative;
	min-height: 1px;
	@include box-sizing(border-box);
}


// Mobile grid
#{$gridSpanMobileClasses} {
	//@include span-stuff();
	float: left; 
}

@for $i from 1 through $gridColumns {
	.spanMobile#{$i}{ width: $i*$gridUnitWidth; }
	.offsetMobile#{$i}{ margin-left: $i*$gridUnitWidth; }
}


// Responsive: Tablets and up
@media screen and (min-width: 768px) {
	.container {
		max-width: 700px;
	}


	// Float columns
	#{$gridSpanClasses} { 
		@include span-stuff();
	}

	.row {
		// Negative margin the row out to align the content of columns
		margin-left:  $gridPaddingWidth / -2;
		margin-right: $gridPaddingWidth / -2;
	}

	@for $i from 1 through $gridColumns {
  		.span#{$i}, .width#{$i} { width: $i*$gridUnitWidth; } // TODO Width
  		.offset#{$i}{ margin-left: $i*$gridUnitWidth; }
	}
}

// Responsive: Desktops and up
@media screen and (min-width: 992px) {
	.container {
		max-width: 920px;
	}
}

// Responsive: Large desktops and up
@media screen and (min-width: 1200px) {
	.container {
		max-width: 1120px;
	}
}




// Reset utility classes due to specificity
[class*="span"].floatRight {
	float: right;
}
